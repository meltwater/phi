---
version: 2

references:
  build: &build
    working_directory: ~/build
    steps:
      - run:
          name: Install Alpine Linux build dependencies
          command: |
            if [[ -f /sbin/apk ]]; then
              apk add --no-cache ca-certificates git openssh-client
            fi
      - add_ssh_keys
      - checkout
      - run:
          name: Save build versions
          command: |
            echo "node: ${NODE_VERSION}" >> .versions
            echo "yarn: ${YARN_VERSION}" >> .versions
            if [[ -f /sbin/apk ]]; then
              echo "alpine: $(cat /etc/alpine-release)" >> .versions
            fi
            cat .versions
      - restore_cache:
          key: yarn-cache-{{ arch }}-
      - restore_cache:
          key: node-modules-{{ arch }}-{{ checksum ".versions" }}-{{ checksum "yarn.lock" }}
      - restore_cache:
          key: gh-pages-{{ checksum ".versions" }}
      - run:
          name: Set yarn cache
          command: yarn config set cache-folder $HOME/.yarn-cache
      - run:
          name: Add npm authentication token
          command: echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
      - run:
          name: Install dependencies
          command: yarn install --pure-lockfile
      - save_cache:
          key: yarn-cache-{{ arch }}-{{ epoch }}
          paths: ~/.yarn-cache
      - save_cache:
          key: node-modules-{{ arch }}-{{ checksum ".versions" }}-{{ checksum "yarn.lock" }}
          paths: node_modules
      - save_cache:
          key: gh-pages-{{ checksum ".versions" }}-{{ epoch }}
          paths: .gh-pages
      - run:
          name: Test and build package
          command: |
            if [[ "${PUBLISH}" == 'true' ]]; then
              yarn run build
            else
              yarn run dist
            fi
      - run:
          name: Upload coverage to Codecov
          command: |
            if [[ "${COVERAGE}" == 'true' && -n "${CODECOV_TOKEN}" ]]; then
              yarn global add codecov
              codecov
            fi
      - deploy:
          name: Publish package
          command: |
            if [[ "${PUBLISH}" == 'true' ]]; then
              .circleci/publish.sh
            fi

jobs:
  node:
    docker:
      - image: node
    <<: *build
  node-alpine:
    docker:
      - image: node:alpine
    <<: *build
  node-carbon:
    environment:
      COVERAGE: 'true'
    docker:
      - image: node:carbon
    <<: *build
  node-carbon-alpine:
    docker:
      - image: node:carbon-alpine
    <<: *build
  publish:
    environment:
      PUBLISH: 'true'
    docker:
      - image: node:carbon
    <<: *build

workflows:
  version: 2
  default:
    jobs:
      - node
      - node-alpine
      - node-carbon
      - node-carbon-alpine
      - publish:
          filters:
            branches:
              only: /^(v[0-9]|master)/
          requires:
            - node
            - node-alpine
            - node-carbon
            - node-carbon-alpine
